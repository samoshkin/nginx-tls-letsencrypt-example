server {
    listen 443 ssl default_server;
    server_name foobbz.site www.foobbz.site;

    ssl on;

    include /etc/nginx/conf.d/ssl_params.inc;

    # RSA certificates
    ssl_certificate       /etc/nginx/ssl/foobbz.site/certs/fullchain.rsa.pem;
    ssl_certificate_key   /etc/nginx/ssl/foobbz.site/private/privkey.rsa.pem;

    # ECDSA certificates
    ssl_certificate       /etc/nginx/ssl/foobbz.site/certs/fullchain.ecc.pem;
    ssl_certificate_key   /etc/nginx/ssl/foobbz.site/private/privkey.ecc.pem;

    # NOTE: seems OCSP stapling works fine even without ssl_trusted_certificate
    # when we have intermediate CA certificates bundled in ssl_certificate.
    # ssl_trusted_certificate /etc/nginx/ssl/foobbz.site/certs/trusted_chain.pem;

    # Just return a blank response
    location / {
      return 200 'foobbz.site';
      default_type text/plain;
    }
}

# Redirect from HTTP to HTTPS
# Setup entrypoint for letsencrypt ACME challenge requests
server {
    listen  80;
    server_name foobbz.site www.foobbz.site;

    include conf.d/acme_challenge.inc;

    location / {
        return  301 https://$host$request_uri;
    }
}


# Prevent processing request with undefined Host header or TLS SNI extension
# Catch all unknown server names
# server {
#     listen      443 ssl default_server;
#     server_name _;
#     return      444;
    
#     ssl_certificate /etc/nginx/ssl/certs/foobbz.site.rsa.bundle.crt;
#     ssl_certificate_key /etc/nginx/ssl/private/foobbz.site.rsa.key;
# }

# another approach to redirect HTTP -> HTTPS
# server {
#     listen 80 default_server;
#     listen [::]:80 default_server ipv6only=on;
#     server_name visualcosita.xyz;                       ###Your Domain Name###
#     return 301 https://$server_name$request_uri;
# }  

